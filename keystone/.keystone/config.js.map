{
  "version": 3,
  "sources": ["../keystone.ts", "../schema.ts", "../auth.ts"],
  "sourcesContent": ["import { config } from '@keystone-6/core';\nimport { lists } from './schema';\nimport { withAuth, session } from './auth';\nimport dotenv from 'dotenv';\ndotenv.config({ path: '.env' });\n\nconst DB_URL = process.env[`${process.env.KEYSTONE_ENV}_DB_URL`];\nconst DB_PORT = process.env[`${process.env.KEYSTONE_ENV}_DB_PORT`];\nconst DB_USER = process.env[`${process.env.KEYSTONE_ENV}_DB_USER`];\nconst DB_PASSWORD = process.env[`${process.env.KEYSTONE_ENV}_DB_PASSWORD`];\nif (DB_PASSWORD === undefined) {\n  throw new Error(`Environment variable DB_PASSWORD is not defined.`);\n}\nconst DB_PASSWORD_ENCODED = encodeURIComponent(DB_PASSWORD);\nconst DB_DATABASE = process.env[`${process.env.KEYSTONE_ENV}_DB_DATABASE`];\n\nexport default withAuth(\n  config({\n    db: {\n      provider: 'postgresql',\n      url: `postgresql://${DB_USER}:${DB_PASSWORD_ENCODED}@${DB_URL}:${DB_PORT}/${DB_DATABASE}`,\n      idField: { kind: 'autoincrement' },\n    },\n    lists,\n    session,\n  })\n);\n", "import { list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\nimport {\n  text,\n  relationship,\n  password,\n  timestamp,\n  select,\n} from '@keystone-6/core/fields';\nimport { document } from '@keystone-6/fields-document';\nimport type { Lists } from '.keystone/types';\n\nexport const lists: Lists = {\n  User: list({\n    access: allowAll,\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n\n      email: text({\n        validation: { isRequired: true },\n        isIndexed: 'unique',\n      }),\n\n      password: password({ validation: { isRequired: true } }),\n\n      createdAt: timestamp({\n        defaultValue: { kind: 'now' },\n      }),\n    },\n  }),\n\n  Provider: list({\n    access: allowAll,\n    fields: {\n      name: text(),\n      createdAt: timestamp({\n        defaultValue: { kind: 'now' },\n      }),\n    }\n  }),\n\n  Account: list({\n    access: allowAll,\n    fields: {\n      user: relationship({ ref: 'User', many: true }),\n      provider: relationship({ ref: 'Provider', many: true }),\n      token: text(),\n      refresh_token: text(),\n      expiry: timestamp(),\n      createdAt: timestamp({\n        defaultValue: { kind: 'now' },\n      })\n    }\n  }),\n\n  Email: list({\n    access: allowAll,\n    fields: {\n      user: relationship({ ref: 'User' }),\n      provider: relationship({ ref: 'Provider' }),\n      subject: text(),\n      sender: text(),\n      message: text(),\n      timestamp: timestamp(),\n      createdAt: timestamp({\n        defaultValue: { kind: 'now' },\n      })\n    }\n  })\n};\n", "import { randomBytes } from 'crypto';\nimport { createAuth } from '@keystone-6/auth';\nimport { statelessSessions } from '@keystone-6/core/session';\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== 'production') {\n  sessionSecret = randomBytes(32).toString('hex');\n}\n\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n  sessionData: 'id name createdAt',\n  secretField: 'password',\n\n  initFirstItem: {\n    fields: ['name', 'email', 'password']\n  },\n});\n\nconst sessionMaxAge = 60 * 60 * 24 * 30;\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret!,\n});\n\nexport { withAuth, session };\n"],
  "mappings": "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",
  "names": ["import_core", "dotenv"]
}
