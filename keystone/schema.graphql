# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type Provider {
  id: ID!
  name: String
  createdAt: DateTime
}

input ProviderWhereUniqueInput {
  id: ID
}

input ProviderWhereInput {
  AND: [ProviderWhereInput!]
  OR: [ProviderWhereInput!]
  NOT: [ProviderWhereInput!]
  id: IDFilter
  name: StringFilter
  createdAt: DateTimeNullableFilter
}

input ProviderOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
}

input ProviderUpdateInput {
  name: String
  createdAt: DateTime
}

input ProviderUpdateArgs {
  where: ProviderWhereUniqueInput!
  data: ProviderUpdateInput!
}

input ProviderCreateInput {
  name: String
  createdAt: DateTime
}

type Account {
  id: ID!
  user(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  userCount(where: UserWhereInput! = {}): Int
  provider(where: ProviderWhereInput! = {}, orderBy: [ProviderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProviderWhereUniqueInput): [Provider!]
  providerCount(where: ProviderWhereInput! = {}): Int
  token: String
  refresh_token: String
  expiry: DateTime
  createdAt: DateTime
}

input AccountWhereUniqueInput {
  id: ID
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  id: IDFilter
  user: UserManyRelationFilter
  provider: ProviderManyRelationFilter
  token: StringFilter
  refresh_token: StringFilter
  expiry: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input ProviderManyRelationFilter {
  every: ProviderWhereInput
  some: ProviderWhereInput
  none: ProviderWhereInput
}

input AccountOrderByInput {
  id: OrderDirection
  token: OrderDirection
  refresh_token: OrderDirection
  expiry: OrderDirection
  createdAt: OrderDirection
}

input AccountUpdateInput {
  user: UserRelateToManyForUpdateInput
  provider: ProviderRelateToManyForUpdateInput
  token: String
  refresh_token: String
  expiry: DateTime
  createdAt: DateTime
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input ProviderRelateToManyForUpdateInput {
  disconnect: [ProviderWhereUniqueInput!]
  set: [ProviderWhereUniqueInput!]
  create: [ProviderCreateInput!]
  connect: [ProviderWhereUniqueInput!]
}

input AccountUpdateArgs {
  where: AccountWhereUniqueInput!
  data: AccountUpdateInput!
}

input AccountCreateInput {
  user: UserRelateToManyForCreateInput
  provider: ProviderRelateToManyForCreateInput
  token: String
  refresh_token: String
  expiry: DateTime
  createdAt: DateTime
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input ProviderRelateToManyForCreateInput {
  create: [ProviderCreateInput!]
  connect: [ProviderWhereUniqueInput!]
}

type Email {
  id: ID!
  user: User
  provider: Provider
  subject: String
  sender: String
  message: String
  timestamp: DateTime
  createdAt: DateTime
}

input EmailWhereUniqueInput {
  id: ID
}

input EmailWhereInput {
  AND: [EmailWhereInput!]
  OR: [EmailWhereInput!]
  NOT: [EmailWhereInput!]
  id: IDFilter
  user: UserWhereInput
  provider: ProviderWhereInput
  subject: StringFilter
  sender: StringFilter
  message: StringFilter
  timestamp: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input EmailOrderByInput {
  id: OrderDirection
  subject: OrderDirection
  sender: OrderDirection
  message: OrderDirection
  timestamp: OrderDirection
  createdAt: OrderDirection
}

input EmailUpdateInput {
  user: UserRelateToOneForUpdateInput
  provider: ProviderRelateToOneForUpdateInput
  subject: String
  sender: String
  message: String
  timestamp: DateTime
  createdAt: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input ProviderRelateToOneForUpdateInput {
  create: ProviderCreateInput
  connect: ProviderWhereUniqueInput
  disconnect: Boolean
}

input EmailUpdateArgs {
  where: EmailWhereUniqueInput!
  data: EmailUpdateInput!
}

input EmailCreateInput {
  user: UserRelateToOneForCreateInput
  provider: ProviderRelateToOneForCreateInput
  subject: String
  sender: String
  message: String
  timestamp: DateTime
  createdAt: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input ProviderRelateToOneForCreateInput {
  create: ProviderCreateInput
  connect: ProviderWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createProvider(data: ProviderCreateInput!): Provider
  createProviders(data: [ProviderCreateInput!]!): [Provider]
  updateProvider(where: ProviderWhereUniqueInput!, data: ProviderUpdateInput!): Provider
  updateProviders(data: [ProviderUpdateArgs!]!): [Provider]
  deleteProvider(where: ProviderWhereUniqueInput!): Provider
  deleteProviders(where: [ProviderWhereUniqueInput!]!): [Provider]
  createAccount(data: AccountCreateInput!): Account
  createAccounts(data: [AccountCreateInput!]!): [Account]
  updateAccount(where: AccountWhereUniqueInput!, data: AccountUpdateInput!): Account
  updateAccounts(data: [AccountUpdateArgs!]!): [Account]
  deleteAccount(where: AccountWhereUniqueInput!): Account
  deleteAccounts(where: [AccountWhereUniqueInput!]!): [Account]
  createEmail(data: EmailCreateInput!): Email
  createEmails(data: [EmailCreateInput!]!): [Email]
  updateEmail(where: EmailWhereUniqueInput!, data: EmailUpdateInput!): Email
  updateEmails(data: [EmailUpdateArgs!]!): [Email]
  deleteEmail(where: EmailWhereUniqueInput!): Email
  deleteEmails(where: [EmailWhereUniqueInput!]!): [Email]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  providers(where: ProviderWhereInput! = {}, orderBy: [ProviderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProviderWhereUniqueInput): [Provider!]
  provider(where: ProviderWhereUniqueInput!): Provider
  providersCount(where: ProviderWhereInput! = {}): Int
  accounts(where: AccountWhereInput! = {}, orderBy: [AccountOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AccountWhereUniqueInput): [Account!]
  account(where: AccountWhereUniqueInput!): Account
  accountsCount(where: AccountWhereInput! = {}): Int
  emails(where: EmailWhereInput! = {}, orderBy: [EmailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EmailWhereUniqueInput): [Email!]
  email(where: EmailWhereUniqueInput!): Email
  emailsCount(where: EmailWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
